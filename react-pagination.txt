import React, { useState } from "react";
import "./style.css"

function Pagination(props) {
  const [pageCount, setPageCount] = useState(5);
  const pageNumber = [];
  for (let i = 1; i <= Math.ceil(props.totalData / props.limit); i++) {
    pageNumber.push(i);
  }
  const handleNextPagination = () => {
    if (pageCount < props.totalData / props.limit) {
      setPageCount(pageCount + 1);
    }
  };
  const handlePrevPagination = () => {
    if (pageCount > 5) {
      setPageCount(pageCount - 1);
    }
  };
  return (
    <>
      <ul className="pagination justify-content-end">
        <li className="page-item" onClick={handlePrevPagination}>
          <p className="page-link">
            Prev
          </p>
        </li>{" "}
        {pageNumber.slice(pageCount - 5, pageCount).map((number) => (
          <li key={number} className="page-item">
            <p className={props.currentPage == number ? "page-link active": "page-link"} onClick={() => props.paginate(number)}>
              {number}
            </p>
          </li>
        ))}
        <li className="page-item" onClick={handleNextPagination}>
          <p className="page-link">
            Next
          </p>
        </li>
      </ul>
    </>
  );
}

export default Pagination;




  const [tableData, setTableData] = useState([]);
  const [currentPage, setCurrentPage] = useState(1);
  const [limit, setLimit] = useState(10);
  const indexOfLastData = currentPage * limit;
  const indexOfFirstData = indexOfLastData - limit;
  const currentData = tableData.slice(indexOfFirstData, indexOfLastData);
  const paginate = (pageNumber) => setCurrentPage(pageNumber);
  const tableRow = (e) => {
    setLimit(e.target.value);
  };


            <Col xxl={8} lg={6} className="mt-3 text-end">
              <label className="all-lbl">Rows Per Page</label>
              <span className="position-relative">
                <select
                  className="ms-2 limit-drp"
                  value={limit}
                  onChange={tableRow}
                >
                  <option value="05">05</option>
                  <option value="10">10</option>
                  <option value="15">15</option>
                  <option value="20">20</option>
                </select>
                <FaChevronDown className="limitarrow" />
              </span>
            </Col>

                <tbody>
                  {currentData.map((item, index) => (
                    <tr key={index}>
                      <td>{index + 1}</td>
                      <td>
                        <span className="d-flex align-items-center">
                          <img src={tableImg} alt="" className="tableImg" />
                          <span className="ms-3">
                            <p>{item[0]}</p>
                            <p className="mt-1 fw-bold">{item[1]}</p>
                          </span>
                        </span>
                      </td>
                      <td>{item[2]}</td>
                      <td>{item[3]}</td>
                      <td>{item[4]}</td>
                      <td>{item[5]}</td>
                      <td>
                        <span
                          className={`${item[6] === "Minor" ? "low-span" : ""}${
                            item[6] === "Major" ? "high-span" : ""
                          }${item[6] === "Critical" ? "normal-span" : ""}`}
                        >
                          {item[6]}
                        </span>
                      </td>
                      <td>
                        <Dropdown className="tableDown">
                          <Dropdown.Toggle
                            id="dropdown-basic"
                            className="tbl-drp"
                          >
                            <FaEllipsisV />
                          </Dropdown.Toggle>
                          <Dropdown.Menu>
                            <Link
                              to={`/solaralarms/solarrca/${index + 1}`}
                              className="dropdown-item"
                            >
                              RCA
                            </Link>
                            <button
                              className="dropdown-item"
                              onClick={() => {
                                setRowData(item);
                                setModalShow(true);
                              }}
                            >
                              New Diagnosis
                            </button>
                            <hr />
                            <button
                              className="dropdown-item"
                              onClick={() => {
                                setRowData(item);
                                setModalShow2(true);
                              }}
                            >
                              Previous Diagnosis
                            </button>
                          </Dropdown.Menu>
                        </Dropdown>
                      </td>
                    </tr>
                  ))}
                </tbody>



          <Row>
            <Col lg={12} className="mt-3">
              <Pagination
                limit={limit}
                totalData={tableData.length}
                paginate={paginate}
                currentPage = {currentPage}

              />
            </Col>
          </Row>